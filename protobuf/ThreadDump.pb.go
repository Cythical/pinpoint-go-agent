// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ThreadDump.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PThreadState int32

const (
	PThreadState_THREAD_STATE_NEW           PThreadState = 0
	PThreadState_THREAD_STATE_RUNNABLE      PThreadState = 1
	PThreadState_THREAD_STATE_BLOCKED       PThreadState = 2
	PThreadState_THREAD_STATE_WAITING       PThreadState = 3
	PThreadState_THREAD_STATE_TIMED_WAITING PThreadState = 4
	PThreadState_THREAD_STATE_TERMINATED    PThreadState = 5
	PThreadState_THREAD_STATE_UNKNOWN       PThreadState = 6
)

var PThreadState_name = map[int32]string{
	0: "THREAD_STATE_NEW",
	1: "THREAD_STATE_RUNNABLE",
	2: "THREAD_STATE_BLOCKED",
	3: "THREAD_STATE_WAITING",
	4: "THREAD_STATE_TIMED_WAITING",
	5: "THREAD_STATE_TERMINATED",
	6: "THREAD_STATE_UNKNOWN",
}

var PThreadState_value = map[string]int32{
	"THREAD_STATE_NEW":           0,
	"THREAD_STATE_RUNNABLE":      1,
	"THREAD_STATE_BLOCKED":       2,
	"THREAD_STATE_WAITING":       3,
	"THREAD_STATE_TIMED_WAITING": 4,
	"THREAD_STATE_TERMINATED":    5,
	"THREAD_STATE_UNKNOWN":       6,
}

func (x PThreadState) String() string {
	return proto.EnumName(PThreadState_name, int32(x))
}

func (PThreadState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f8203157ab6c6959, []int{0}
}

type PThreadDumpType int32

const (
	PThreadDumpType_TARGET  PThreadDumpType = 0
	PThreadDumpType_PENDING PThreadDumpType = 1
)

var PThreadDumpType_name = map[int32]string{
	0: "TARGET",
	1: "PENDING",
}

var PThreadDumpType_value = map[string]int32{
	"TARGET":  0,
	"PENDING": 1,
}

func (x PThreadDumpType) String() string {
	return proto.EnumName(PThreadDumpType_name, int32(x))
}

func (PThreadDumpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f8203157ab6c6959, []int{1}
}

type PMonitorInfo struct {
	StackDepth           int32    `protobuf:"varint,1,opt,name=stackDepth,proto3" json:"stackDepth,omitempty"`
	StackFrame           string   `protobuf:"bytes,2,opt,name=stackFrame,proto3" json:"stackFrame,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PMonitorInfo) Reset()         { *m = PMonitorInfo{} }
func (m *PMonitorInfo) String() string { return proto.CompactTextString(m) }
func (*PMonitorInfo) ProtoMessage()    {}
func (*PMonitorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8203157ab6c6959, []int{0}
}

func (m *PMonitorInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PMonitorInfo.Unmarshal(m, b)
}
func (m *PMonitorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PMonitorInfo.Marshal(b, m, deterministic)
}
func (m *PMonitorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PMonitorInfo.Merge(m, src)
}
func (m *PMonitorInfo) XXX_Size() int {
	return xxx_messageInfo_PMonitorInfo.Size(m)
}
func (m *PMonitorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PMonitorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PMonitorInfo proto.InternalMessageInfo

func (m *PMonitorInfo) GetStackDepth() int32 {
	if m != nil {
		return m.StackDepth
	}
	return 0
}

func (m *PMonitorInfo) GetStackFrame() string {
	if m != nil {
		return m.StackFrame
	}
	return ""
}

type PThreadDump struct {
	ThreadName           string          `protobuf:"bytes,1,opt,name=threadName,proto3" json:"threadName,omitempty"`
	ThreadId             int64           `protobuf:"varint,2,opt,name=threadId,proto3" json:"threadId,omitempty"`
	BlockedTime          int64           `protobuf:"varint,3,opt,name=blockedTime,proto3" json:"blockedTime,omitempty"`
	BlockedCount         int64           `protobuf:"varint,4,opt,name=blockedCount,proto3" json:"blockedCount,omitempty"`
	WaitedTime           int64           `protobuf:"varint,5,opt,name=waitedTime,proto3" json:"waitedTime,omitempty"`
	WaitedCount          int64           `protobuf:"varint,6,opt,name=waitedCount,proto3" json:"waitedCount,omitempty"`
	LockName             string          `protobuf:"bytes,7,opt,name=lockName,proto3" json:"lockName,omitempty"`
	LockOwnerId          int64           `protobuf:"varint,8,opt,name=lockOwnerId,proto3" json:"lockOwnerId,omitempty"`
	LockOwnerName        string          `protobuf:"bytes,9,opt,name=lockOwnerName,proto3" json:"lockOwnerName,omitempty"`
	InNative             bool            `protobuf:"varint,10,opt,name=inNative,proto3" json:"inNative,omitempty"`
	Suspended            bool            `protobuf:"varint,11,opt,name=suspended,proto3" json:"suspended,omitempty"`
	ThreadState          PThreadState    `protobuf:"varint,12,opt,name=threadState,proto3,enum=v1.PThreadState" json:"threadState,omitempty"`
	StackTrace           []string        `protobuf:"bytes,13,rep,name=stackTrace,proto3" json:"stackTrace,omitempty"`
	LockedMonitor        []*PMonitorInfo `protobuf:"bytes,14,rep,name=lockedMonitor,proto3" json:"lockedMonitor,omitempty"`
	LockedSynchronizer   []string        `protobuf:"bytes,15,rep,name=lockedSynchronizer,proto3" json:"lockedSynchronizer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PThreadDump) Reset()         { *m = PThreadDump{} }
func (m *PThreadDump) String() string { return proto.CompactTextString(m) }
func (*PThreadDump) ProtoMessage()    {}
func (*PThreadDump) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8203157ab6c6959, []int{1}
}

func (m *PThreadDump) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PThreadDump.Unmarshal(m, b)
}
func (m *PThreadDump) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PThreadDump.Marshal(b, m, deterministic)
}
func (m *PThreadDump) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PThreadDump.Merge(m, src)
}
func (m *PThreadDump) XXX_Size() int {
	return xxx_messageInfo_PThreadDump.Size(m)
}
func (m *PThreadDump) XXX_DiscardUnknown() {
	xxx_messageInfo_PThreadDump.DiscardUnknown(m)
}

var xxx_messageInfo_PThreadDump proto.InternalMessageInfo

func (m *PThreadDump) GetThreadName() string {
	if m != nil {
		return m.ThreadName
	}
	return ""
}

func (m *PThreadDump) GetThreadId() int64 {
	if m != nil {
		return m.ThreadId
	}
	return 0
}

func (m *PThreadDump) GetBlockedTime() int64 {
	if m != nil {
		return m.BlockedTime
	}
	return 0
}

func (m *PThreadDump) GetBlockedCount() int64 {
	if m != nil {
		return m.BlockedCount
	}
	return 0
}

func (m *PThreadDump) GetWaitedTime() int64 {
	if m != nil {
		return m.WaitedTime
	}
	return 0
}

func (m *PThreadDump) GetWaitedCount() int64 {
	if m != nil {
		return m.WaitedCount
	}
	return 0
}

func (m *PThreadDump) GetLockName() string {
	if m != nil {
		return m.LockName
	}
	return ""
}

func (m *PThreadDump) GetLockOwnerId() int64 {
	if m != nil {
		return m.LockOwnerId
	}
	return 0
}

func (m *PThreadDump) GetLockOwnerName() string {
	if m != nil {
		return m.LockOwnerName
	}
	return ""
}

func (m *PThreadDump) GetInNative() bool {
	if m != nil {
		return m.InNative
	}
	return false
}

func (m *PThreadDump) GetSuspended() bool {
	if m != nil {
		return m.Suspended
	}
	return false
}

func (m *PThreadDump) GetThreadState() PThreadState {
	if m != nil {
		return m.ThreadState
	}
	return PThreadState_THREAD_STATE_NEW
}

func (m *PThreadDump) GetStackTrace() []string {
	if m != nil {
		return m.StackTrace
	}
	return nil
}

func (m *PThreadDump) GetLockedMonitor() []*PMonitorInfo {
	if m != nil {
		return m.LockedMonitor
	}
	return nil
}

func (m *PThreadDump) GetLockedSynchronizer() []string {
	if m != nil {
		return m.LockedSynchronizer
	}
	return nil
}

type PThreadLightDump struct {
	ThreadName           string       `protobuf:"bytes,1,opt,name=threadName,proto3" json:"threadName,omitempty"`
	ThreadId             int64        `protobuf:"varint,2,opt,name=threadId,proto3" json:"threadId,omitempty"`
	ThreadState          PThreadState `protobuf:"varint,3,opt,name=threadState,proto3,enum=v1.PThreadState" json:"threadState,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PThreadLightDump) Reset()         { *m = PThreadLightDump{} }
func (m *PThreadLightDump) String() string { return proto.CompactTextString(m) }
func (*PThreadLightDump) ProtoMessage()    {}
func (*PThreadLightDump) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8203157ab6c6959, []int{2}
}

func (m *PThreadLightDump) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PThreadLightDump.Unmarshal(m, b)
}
func (m *PThreadLightDump) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PThreadLightDump.Marshal(b, m, deterministic)
}
func (m *PThreadLightDump) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PThreadLightDump.Merge(m, src)
}
func (m *PThreadLightDump) XXX_Size() int {
	return xxx_messageInfo_PThreadLightDump.Size(m)
}
func (m *PThreadLightDump) XXX_DiscardUnknown() {
	xxx_messageInfo_PThreadLightDump.DiscardUnknown(m)
}

var xxx_messageInfo_PThreadLightDump proto.InternalMessageInfo

func (m *PThreadLightDump) GetThreadName() string {
	if m != nil {
		return m.ThreadName
	}
	return ""
}

func (m *PThreadLightDump) GetThreadId() int64 {
	if m != nil {
		return m.ThreadId
	}
	return 0
}

func (m *PThreadLightDump) GetThreadState() PThreadState {
	if m != nil {
		return m.ThreadState
	}
	return PThreadState_THREAD_STATE_NEW
}

type PActiveThreadDump struct {
	StartTime            int64        `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	LocalTraceId         int64        `protobuf:"varint,2,opt,name=localTraceId,proto3" json:"localTraceId,omitempty"`
	ThreadDump           *PThreadDump `protobuf:"bytes,3,opt,name=threadDump,proto3" json:"threadDump,omitempty"`
	Sampled              bool         `protobuf:"varint,4,opt,name=sampled,proto3" json:"sampled,omitempty"`
	TransactionId        string       `protobuf:"bytes,5,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	EntryPoint           string       `protobuf:"bytes,6,opt,name=entryPoint,proto3" json:"entryPoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PActiveThreadDump) Reset()         { *m = PActiveThreadDump{} }
func (m *PActiveThreadDump) String() string { return proto.CompactTextString(m) }
func (*PActiveThreadDump) ProtoMessage()    {}
func (*PActiveThreadDump) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8203157ab6c6959, []int{3}
}

func (m *PActiveThreadDump) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PActiveThreadDump.Unmarshal(m, b)
}
func (m *PActiveThreadDump) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PActiveThreadDump.Marshal(b, m, deterministic)
}
func (m *PActiveThreadDump) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PActiveThreadDump.Merge(m, src)
}
func (m *PActiveThreadDump) XXX_Size() int {
	return xxx_messageInfo_PActiveThreadDump.Size(m)
}
func (m *PActiveThreadDump) XXX_DiscardUnknown() {
	xxx_messageInfo_PActiveThreadDump.DiscardUnknown(m)
}

var xxx_messageInfo_PActiveThreadDump proto.InternalMessageInfo

func (m *PActiveThreadDump) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *PActiveThreadDump) GetLocalTraceId() int64 {
	if m != nil {
		return m.LocalTraceId
	}
	return 0
}

func (m *PActiveThreadDump) GetThreadDump() *PThreadDump {
	if m != nil {
		return m.ThreadDump
	}
	return nil
}

func (m *PActiveThreadDump) GetSampled() bool {
	if m != nil {
		return m.Sampled
	}
	return false
}

func (m *PActiveThreadDump) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *PActiveThreadDump) GetEntryPoint() string {
	if m != nil {
		return m.EntryPoint
	}
	return ""
}

type PActiveThreadLightDump struct {
	StartTime            int64             `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	LocalTraceId         int64             `protobuf:"varint,2,opt,name=localTraceId,proto3" json:"localTraceId,omitempty"`
	ThreadDump           *PThreadLightDump `protobuf:"bytes,3,opt,name=threadDump,proto3" json:"threadDump,omitempty"`
	Sampled              bool              `protobuf:"varint,4,opt,name=sampled,proto3" json:"sampled,omitempty"`
	TransactionId        string            `protobuf:"bytes,5,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	EntryPoint           string            `protobuf:"bytes,6,opt,name=entryPoint,proto3" json:"entryPoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PActiveThreadLightDump) Reset()         { *m = PActiveThreadLightDump{} }
func (m *PActiveThreadLightDump) String() string { return proto.CompactTextString(m) }
func (*PActiveThreadLightDump) ProtoMessage()    {}
func (*PActiveThreadLightDump) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8203157ab6c6959, []int{4}
}

func (m *PActiveThreadLightDump) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PActiveThreadLightDump.Unmarshal(m, b)
}
func (m *PActiveThreadLightDump) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PActiveThreadLightDump.Marshal(b, m, deterministic)
}
func (m *PActiveThreadLightDump) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PActiveThreadLightDump.Merge(m, src)
}
func (m *PActiveThreadLightDump) XXX_Size() int {
	return xxx_messageInfo_PActiveThreadLightDump.Size(m)
}
func (m *PActiveThreadLightDump) XXX_DiscardUnknown() {
	xxx_messageInfo_PActiveThreadLightDump.DiscardUnknown(m)
}

var xxx_messageInfo_PActiveThreadLightDump proto.InternalMessageInfo

func (m *PActiveThreadLightDump) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *PActiveThreadLightDump) GetLocalTraceId() int64 {
	if m != nil {
		return m.LocalTraceId
	}
	return 0
}

func (m *PActiveThreadLightDump) GetThreadDump() *PThreadLightDump {
	if m != nil {
		return m.ThreadDump
	}
	return nil
}

func (m *PActiveThreadLightDump) GetSampled() bool {
	if m != nil {
		return m.Sampled
	}
	return false
}

func (m *PActiveThreadLightDump) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *PActiveThreadLightDump) GetEntryPoint() string {
	if m != nil {
		return m.EntryPoint
	}
	return ""
}

func init() {
	proto.RegisterEnum("v1.PThreadState", PThreadState_name, PThreadState_value)
	proto.RegisterEnum("v1.PThreadDumpType", PThreadDumpType_name, PThreadDumpType_value)
	proto.RegisterType((*PMonitorInfo)(nil), "v1.PMonitorInfo")
	proto.RegisterType((*PThreadDump)(nil), "v1.PThreadDump")
	proto.RegisterType((*PThreadLightDump)(nil), "v1.PThreadLightDump")
	proto.RegisterType((*PActiveThreadDump)(nil), "v1.PActiveThreadDump")
	proto.RegisterType((*PActiveThreadLightDump)(nil), "v1.PActiveThreadLightDump")
}

func init() {
	proto.RegisterFile("ThreadDump.proto", fileDescriptor_f8203157ab6c6959)
}

var fileDescriptor_f8203157ab6c6959 = []byte{
	// 694 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcd, 0x4e, 0xdb, 0x4c,
	0x14, 0xc5, 0x04, 0x42, 0x72, 0x13, 0x88, 0xbf, 0x11, 0x5f, 0xeb, 0x86, 0x0a, 0xa5, 0x51, 0x17,
	0x11, 0x0b, 0x23, 0x68, 0xc5, 0x3e, 0x21, 0x2e, 0xb5, 0x00, 0x13, 0x0d, 0x46, 0x2c, 0xd1, 0x60,
	0x0f, 0x89, 0x45, 0xe2, 0xb1, 0x26, 0x93, 0xa0, 0x74, 0xd9, 0xd7, 0xe9, 0x9b, 0xf4, 0x41, 0xba,
	0xee, 0x23, 0x54, 0x33, 0x36, 0xce, 0x18, 0x58, 0x54, 0x42, 0xea, 0xce, 0xf7, 0x9c, 0xeb, 0x73,
	0xff, 0x8e, 0x34, 0x60, 0xfa, 0x23, 0x4e, 0x49, 0xd8, 0x9f, 0x4d, 0x12, 0x3b, 0xe1, 0x4c, 0x30,
	0xb4, 0x3a, 0x3f, 0x68, 0xee, 0x0c, 0x19, 0x1b, 0x8e, 0xe9, 0xbe, 0x42, 0x6e, 0x67, 0x77, 0xfb,
	0x74, 0x92, 0x88, 0x45, 0x9a, 0xd0, 0xdc, 0x7d, 0x4a, 0x3e, 0x70, 0x92, 0x24, 0x94, 0x4f, 0x53,
	0xbe, 0xed, 0x41, 0x7d, 0x70, 0xce, 0xe2, 0x48, 0x30, 0xee, 0xc6, 0x77, 0x0c, 0xed, 0x02, 0x4c,
	0x05, 0x09, 0xee, 0xfb, 0x34, 0x11, 0x23, 0xcb, 0x68, 0x19, 0x9d, 0x75, 0xac, 0x21, 0x39, 0xff,
	0x85, 0x93, 0x09, 0xb5, 0x56, 0x5b, 0x46, 0xa7, 0x8a, 0x35, 0xa4, 0xfd, 0x63, 0x0d, 0x6a, 0x83,
	0x65, 0x9b, 0x32, 0x5f, 0xa8, 0xc8, 0x93, 0xf9, 0x46, 0x9a, 0xbf, 0x44, 0x50, 0x13, 0x2a, 0x69,
	0xe4, 0x86, 0x4a, 0xad, 0x84, 0xf3, 0x18, 0xb5, 0xa0, 0x76, 0x3b, 0x66, 0xc1, 0x3d, 0x0d, 0xfd,
	0x68, 0x42, 0xad, 0x92, 0xa2, 0x75, 0x08, 0xb5, 0xa1, 0x9e, 0x85, 0xc7, 0x6c, 0x16, 0x0b, 0x6b,
	0x4d, 0xa5, 0x14, 0x30, 0xd9, 0xc1, 0x03, 0x89, 0x44, 0x26, 0xb2, 0xae, 0x32, 0x34, 0x44, 0x56,
	0x49, 0xa3, 0x54, 0xa2, 0x9c, 0x56, 0xd1, 0x20, 0xd9, 0xa3, 0x14, 0x54, 0x13, 0x6c, 0xa8, 0x09,
	0xf2, 0x58, 0xfe, 0x2d, 0xbf, 0x2f, 0x1e, 0x62, 0xca, 0xdd, 0xd0, 0xaa, 0xa4, 0x7f, 0x6b, 0x10,
	0xfa, 0x08, 0x9b, 0x79, 0xa8, 0x24, 0xaa, 0x4a, 0xa2, 0x08, 0xca, 0x1a, 0x51, 0xec, 0x11, 0x11,
	0xcd, 0xa9, 0x05, 0x2d, 0xa3, 0x53, 0xc1, 0x79, 0x8c, 0xde, 0x43, 0x75, 0x3a, 0x9b, 0x26, 0x34,
	0x0e, 0x69, 0x68, 0xd5, 0x14, 0xb9, 0x04, 0xd0, 0x21, 0xd4, 0xd2, 0x8d, 0x5d, 0x0a, 0x22, 0xa8,
	0x55, 0x6f, 0x19, 0x9d, 0xad, 0x43, 0xd3, 0x9e, 0x1f, 0xd8, 0xd9, 0x1d, 0x14, 0x8e, 0xf5, 0xa4,
	0xfc, 0x8a, 0x3e, 0x27, 0x01, 0xb5, 0x36, 0x5b, 0xa5, 0xfc, 0x8a, 0x0a, 0x41, 0x47, 0x69, 0xcf,
	0x34, 0xcc, 0xac, 0x61, 0x6d, 0xb5, 0x4a, 0x9d, 0x5a, 0xa6, 0xaa, 0xd9, 0x05, 0x17, 0xd3, 0x90,
	0x0d, 0x28, 0x05, 0x2e, 0x17, 0x71, 0x30, 0xe2, 0x2c, 0x8e, 0xbe, 0x51, 0x6e, 0x35, 0x94, 0xfe,
	0x0b, 0x4c, 0xfb, 0xbb, 0x01, 0x66, 0xd6, 0xe5, 0x59, 0x34, 0x1c, 0x89, 0x57, 0x5b, 0xe6, 0xc9,
	0x32, 0x4a, 0x7f, 0xb1, 0x8c, 0xf6, 0x2f, 0x03, 0xfe, 0x1b, 0x74, 0x03, 0xb9, 0x6a, 0xcd, 0xb8,
	0x72, 0xe9, 0x82, 0x70, 0xa1, 0x5c, 0x63, 0xa8, 0x32, 0x4b, 0x40, 0x1a, 0x6f, 0xcc, 0x02, 0x32,
	0x56, 0xeb, 0xca, 0xfb, 0x28, 0x60, 0x68, 0xff, 0x71, 0x0e, 0xa9, 0xa7, 0x5a, 0xa9, 0x1d, 0x36,
	0xb4, 0x56, 0x24, 0x8c, 0xb5, 0x14, 0x64, 0xc1, 0xc6, 0x94, 0x4c, 0x92, 0x31, 0x0d, 0x95, 0x91,
	0x2b, 0xf8, 0x31, 0x94, 0x1e, 0x12, 0x9c, 0xc4, 0x53, 0x12, 0x88, 0x88, 0xc5, 0x6e, 0xa8, 0x6c,
	0x5c, 0xc5, 0x45, 0x50, 0x2e, 0x8e, 0xc6, 0x82, 0x2f, 0x06, 0x2c, 0xca, 0x8c, 0x5c, 0xc5, 0x1a,
	0xd2, 0xfe, 0x6d, 0xc0, 0x9b, 0xc2, 0xa0, 0xcb, 0x9d, 0xbf, 0x7e, 0xda, 0xcf, 0x2f, 0x4c, 0xbb,
	0xad, 0x4d, 0x9b, 0xd7, 0xfa, 0x97, 0x23, 0xef, 0xfd, 0x34, 0xa0, 0xae, 0x5f, 0x1e, 0x6d, 0x83,
	0xe9, 0x7f, 0xc5, 0x4e, 0xb7, 0x7f, 0x73, 0xe9, 0x77, 0x7d, 0xe7, 0xc6, 0x73, 0xae, 0xcd, 0x15,
	0xf4, 0x0e, 0xfe, 0x2f, 0xa0, 0xf8, 0xca, 0xf3, 0xba, 0xbd, 0x33, 0xc7, 0x34, 0x90, 0x05, 0xdb,
	0x05, 0xaa, 0x77, 0x76, 0x71, 0x7c, 0xea, 0xf4, 0xcd, 0xd5, 0x67, 0xcc, 0x75, 0xd7, 0xf5, 0x5d,
	0xef, 0xc4, 0x2c, 0xa1, 0x5d, 0x68, 0x16, 0x18, 0xdf, 0x3d, 0x77, 0xfa, 0x39, 0xbf, 0x86, 0x76,
	0xe0, 0x6d, 0x91, 0x77, 0xf0, 0xb9, 0xeb, 0x75, 0x7d, 0xa7, 0x6f, 0xae, 0x3f, 0x93, 0xbd, 0xf2,
	0x4e, 0xbd, 0x8b, 0x6b, 0xcf, 0x2c, 0xef, 0xed, 0x41, 0x43, 0xb3, 0x8e, 0xbf, 0x48, 0x28, 0x02,
	0x28, 0xfb, 0x5d, 0x7c, 0xe2, 0xf8, 0xe6, 0x0a, 0xaa, 0xc1, 0xc6, 0xc0, 0xf1, 0xfa, 0xb2, 0x84,
	0xd1, 0x3b, 0x82, 0x0f, 0x01, 0x9b, 0xd8, 0x31, 0x99, 0x53, 0x1e, 0x30, 0x9e, 0xd8, 0x49, 0x14,
	0x27, 0x72, 0x25, 0xf6, 0x90, 0x27, 0x81, 0x2d, 0xe4, 0xd5, 0x7a, 0x8d, 0xa5, 0xda, 0x40, 0xbe,
	0x06, 0x03, 0xe3, 0xb6, 0xac, 0x9e, 0x85, 0x4f, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe8, 0xdd,
	0xd8, 0x24, 0x6b, 0x06, 0x00, 0x00,
}
